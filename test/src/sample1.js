// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Decco = require("./Decco.js");
var Js_json = require("rescript/lib/js/js_json.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function t_encode(v) {
  if (v === "two") {
    return ["second"];
  } else {
    return ["first"];
  }
}

function t_decode(v) {
  var jsonArr = Js_json.classify(v);
  if (typeof jsonArr === "number") {
    return Decco.error(undefined, "Not a polyvariant", v);
  }
  if (jsonArr.TAG !== /* JSONArray */3) {
    return Decco.error(undefined, "Not a polyvariant", v);
  }
  var jsonArr$1 = jsonArr._0;
  if (jsonArr$1.length === 0) {
    return Decco.error(undefined, "Expected polyvariant, found empty array", v);
  }
  var tagged = jsonArr$1.map(Js_json.classify);
  var match = Belt_Array.getExn(tagged, 0);
  if (typeof match !== "number" && match.TAG === /* JSONString */0) {
    switch (match._0) {
      case "first" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to polyvariant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: "one"
                  };
          }
      case "second" :
          if (tagged.length !== 1) {
            return Decco.error(undefined, "Invalid number of arguments to polyvariant constructor", v);
          } else {
            return {
                    TAG: /* Ok */0,
                    _0: "two"
                  };
          }
      default:
        
    }
  }
  return Decco.error(undefined, "Invalid polyvariant constructor", Belt_Array.getExn(jsonArr$1, 0));
}

var sample1 = "one";

exports.t_encode = t_encode;
exports.t_decode = t_decode;
exports.sample1 = sample1;
/* No side effect */
