// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Decco = require("./Decco.js");
var Js_json = require("rescript/lib/js/js_json.js");

function t_encode(v) {
  if (v === "two") {
    return "second";
  } else {
    return "first";
  }
}

function t_decode(v) {
  var match = Js_json.classify(v);
  if (typeof match === "number") {
    return Decco.error(undefined, "Not a polyvariant", v);
  }
  if (match.TAG !== /* JSONString */0) {
    return Decco.error(undefined, "Not a polyvariant", v);
  }
  var tagged = Js_json.classify(v);
  if (typeof tagged === "number") {
    return Decco.error(undefined, "Invalid polyvariant constructor", v);
  }
  if (tagged.TAG !== /* JSONString */0) {
    return Decco.error(undefined, "Invalid polyvariant constructor", v);
  }
  switch (tagged._0) {
    case "first" :
        return {
                TAG: /* Ok */0,
                _0: "one"
              };
    case "second" :
        return {
                TAG: /* Ok */0,
                _0: "two"
              };
    default:
      return Decco.error(undefined, "Invalid polyvariant constructor", v);
  }
}

var sample1 = "one";

exports.t_encode = t_encode;
exports.t_decode = t_decode;
exports.sample1 = sample1;
/* No side effect */
